import xml.etree.ElementTree as xml
import numpy as np
import cv2
import os
import random
import matplotlib.pyplot as plt

def editXML(xml_filename,foldername,filename,pathname,image,objects):
    root=xml.Element('annotation')

    folder=xml.Element('folder')
    folder.text=foldername
    root.append(folder)

    file = xml.Element('filename')
    file.text = filename
    root.append(file)

    path=xml.Element('path')
    path.text=pathname
    root.append(path)

    source=xml.Element('source')
    root.append(source)
    database=xml.SubElement(source,'database')
    database.text='Unknown'

    size=xml.Element('size')
    root.append(size)
    width=xml.SubElement(size,'width')
    width.text=str(image.shape[1])
    height=xml.SubElement(size,'height')
    height.text=str(image.shape[0])
    depth=xml.SubElement(size,'depth')
    depth.text=str(image.shape[2])


    for i in range(int(objects.shape[0])):
        object=xml.Element('object')
        root.append(object)
        name=xml.SubElement(object,'name')
        name.text=objects[i,0]

        pose=xml.SubElement(object,'pose')
        pose.text='Unspecified'
        truncated=xml.SubElement(object,'truncated')
        truncated.text=str(0)
        difficult = xml.SubElement(object, 'difficult')
        difficult.text = str(0)

        bndbox=xml.SubElement(object,'bndbox')
        xmin=xml.SubElement(bndbox,'xmin')
        xmin.text=str(objects[i,1])
        ymin = xml.SubElement(bndbox, 'ymin')
        ymin.text = str(objects[i,2])
        xmax = xml.SubElement(bndbox, 'xmax')
        xmax.text = str(objects[i,3])
        ymax = xml.SubElement(bndbox, 'ymax')
        ymax.text = str(objects[i,4])
    tree=xml.ElementTree(root)
    with open(xml_filename,'w') as fh:
        tree.write(fh)
    return

def list_of_files(folder_name):
  three = os.walk(folder_name)
  for i in three:
    dictionary = i
  filesname = dictionary[-1]
  return filesname

def generate_mask(filename):
  image = cv2.imread(filename, cv2.IMREAD_COLOR)
  image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  _, mask = cv2.threshold(image_gray, 245, 255, cv2.THRESH_BINARY_INV)
  result = cv2.bitwise_and(image, image, mask=mask)
  return result

def split_images(mask,background,name):
  while mask.shape[0] > 480:
    k = random.random()
    mask = cv2.resize(mask, None, fx=k, fy=k)
  xmin = random.randint(0, background.shape[1] - mask.shape[1] - 10)
  ymin = random.randint(0, background.shape[0] - mask.shape[0] - 10)
  xmax = xmin + int(mask.shape[1])
  ymax = ymin + int(mask.shape[0])
  for i in range(mask.shape[0]):
    for j in range(mask.shape[1]):
      for k in range(mask.shape[2]):
        if mask[i,j,k]!=0:
          background[ymin+i,xmin+j,k]=mask[i,j,k]
  object_description=[name,xmin,ymin,xmax,ymax]
  return background,object_description

def parser_names(name):
    if name[0]=='F':
        return 'Fanuc_r-2000'
    elif name[0]=='K':
        return 'Kuka_LBR_IIWA_14'
    elif name[0]=='U':
        return 'UR10e'
    elif name[0]=='A':
        return 'AR601M'

masks=list_of_files('templates')
backgrounds=list_of_files('backgrounds')

for i in range(461,1000):
    num_objects=random.randint(1,5)
    background_num=random.randint(0,len(backgrounds)-1)
    background=cv2.imread('backgrounds/'+backgrounds[background_num],cv2.IMREAD_COLOR)
    objects=[]
    for j in range(num_objects):
        n=random.randint(0,len(masks)-2)
        mask=generate_mask('templates/'+masks[n])
        background, obj = split_images(mask, background, parser_names(masks[n]))
        objects.append(obj)
    image_name='autogenerate_'+str(i)+'.png'
    path_name='Autogenerated_dataset/Images/'+image_name
    cv2.imwrite(path_name,background)
    objects = np.asarray(objects)
    editXML('Autogenerated_dataset/Labels/autogenerate_'+str(i)+'.xml','Images',image_name,path_name,background,objects)
    print(str(i)+' is done')